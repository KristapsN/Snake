{"version":3,"sources":["components/snakeElements/snakeHead.tsx","components/snakeElements/snakeApple.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/snakeElements/snake.module.scss"],"names":["SnakeHead","x","y","className","style","snake","top","left","SnakeApple","xApple","yApple","eaten","appleEaten","apple","App","useState","snakeHead","setSnakeHead","id","snakeApples","setSnakeApples","seconds","setSeconds","result","setResult","isActive","setIsActive","input","setInput","document","body","addEventListener","event","key","setId","useEffect","uuidv4","interval","dots","snakeStart","length","push","shift","map","index","splice","console","log","moveSnake","setTimeout","count","clearTimeout","type","onClick","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e262509d.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './snake.module.scss';\r\n\r\ntype Props = {\r\n  x: number\r\n  y: number\r\n};\r\n\r\nexport const SnakeHead = ({ x, y }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      <span className={style.snake} style={{ top: `${y}%`, left: `${x}%` }} />\r\n    </>\r\n\r\n  );\r\n};","import React from 'react';\r\nimport style from './snake.module.scss';\r\n\r\ntype Props = {\r\n  xApple: number\r\n  yApple: number\r\n  eaten: boolean\r\n};\r\n\r\nexport const SnakeApple = ({ xApple, yApple, eaten }: Props) => {\r\n\r\n  return (\r\n    <>\r\n      {!eaten ? (\r\n        <span className={style.apple} style={{ top: `${yApple}%`, left: `${xApple}%` }} />\r\n      ) : (\r\n        <span className={style.appleEaten} style={{ top: `${yApple}%`, left: `${xApple}%` }} />\r\n      )}\r\n    </>\r\n\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport 'flexboxgrid';\r\nimport { SnakeHead } from './components/snakeElements/snakeHead';\r\nimport { SnakeApple } from './components/snakeElements/snakeApple';\r\n\r\nconst App = () => {\r\n\r\n  const [snakeHead, setSnakeHead] = useState([\r\n    [0, 0],\r\n    [2, 0],\r\n    [4, 0]\r\n  ]);\r\n  const [snakeApples, setSnakeApples] = useState([\r\n    { id: 0, xApple: 12, yApple: 0, eaten: false },\r\n    { id: 0, xApple: 14, yApple: 0, eaten: false },\r\n    { id: 0, xApple: 16, yApple: 0, eaten: false },\r\n    { id: 0, xApple: 18, yApple: 0, eaten: false },\r\n    { id: 1, xApple: 22, yApple: 56, eaten: false },\r\n    { id: 2, xApple: 16, yApple: 16, eaten: false },\r\n    { id: 3, xApple: 32, yApple: 78, eaten: false },\r\n  ]);\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [result, setResult] = useState('');\r\n  const [isActive, setIsActive] = useState(true);\r\n  const [input, setInput] = useState('ArrowRight');\r\n  const handleKeyPress = (event: { key: string; }) => {\r\n    setInput(event.key);\r\n  };\r\n\r\n  document.body.addEventListener('keydown', handleKeyPress);\r\n\r\n  const moveSnake = () => {\r\n    const dots = [...snakeHead];\r\n    const snakeStart = dots.length - 1;\r\n    switch (input) {\r\n      case 'ArrowRight':\r\n        snakeHead[snakeStart] = [snakeHead[snakeStart][0] + 2,\r\n          snakeHead[snakeStart][1] + 0];\r\n        break;\r\n      case 'ArrowLeft':\r\n        snakeHead[snakeStart] = [snakeHead[snakeStart][0] - 2,\r\n          snakeHead[snakeStart][1] + 0];\r\n        break;\r\n      case 'ArrowUp':\r\n        snakeHead[snakeStart] = [snakeHead[snakeStart][0] + 0,\r\n          snakeHead[snakeStart][1] - 2];\r\n        break;\r\n      case 'ArrowDown':\r\n        snakeHead[snakeStart] = [snakeHead[snakeStart][0] + 0,\r\n          snakeHead[snakeStart][1] + 2];\r\n        break;\r\n    }\r\n    dots.push(snakeHead[snakeStart]);\r\n    dots.shift();\r\n    setSnakeHead(dots);\r\n    snakeApples.map(({ xApple, yApple }, index) => {\r\n      if (snakeHead[snakeStart][0] === xApple &&\r\n         snakeHead[snakeStart][1] === yApple) {\r\n        dots.push(snakeHead[snakeStart]);\r\n        snakeApples[index].eaten = !snakeApples[index].eaten;\r\n        setSnakeApples(snakeApples);\r\n      }\r\n      if (snakeHead[0][0] === xApple && snakeHead[0][1] === yApple) {\r\n        snakeApples.splice(index, 1);\r\n\r\n        setSnakeApples(snakeApples);\r\n      }\r\n      if (snakeHead[snakeStart][0] > 100 || snakeHead[snakeStart][0] < 0 ||\r\n        snakeHead[snakeStart][1] > 100 || snakeHead[snakeStart][1] < 0) {\r\n        setIsActive(false);\r\n        setResult('You Lose!');\r\n      }\r\n      if (snakeApples.length === 0) {\r\n        setIsActive(false);\r\n        setResult('You Won!');\r\n      }\r\n      // if (snakeHead[snakeStart][0] === snakeHead[snakeStart-1][0] && snakeHead[snakeStart][1] === snakeHead[snakeStart-1][1]){\r\n\r\n      // }\r\n      // if (dots[snakeStart]=== dots[snakeStart-1].find(item => dots[snakeStart] )){\r\n      //   console.log('Crash');\r\n      // }\r\n      console.log(dots[snakeStart]);\r\n\r\n\r\n    });\r\n  };\r\n\r\n  const reset = () => {\r\n    setSeconds(0);\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  let setId: string;\r\n  useEffect(() => {\r\n    setId = uuidv4();\r\n    let interval = 0;\r\n    if (isActive) {\r\n      moveSnake();\r\n      // @ts-ignore\r\n      interval = setTimeout(() => {\r\n        let count = seconds;\r\n        setSeconds(count += 1);\r\n\r\n      }, 100);\r\n    } else if (!isActive && seconds !== 0) {\r\n      clearTimeout(interval);\r\n    }\r\n    return () => clearTimeout(interval);\r\n  }, [isActive, seconds]);\r\n\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className=\"row center-xs\">\r\n        <div className=\"col-xs-6\">\r\n          <h2>{seconds/10}</h2>\r\n          <h3>{result}</h3>\r\n\r\n          <button type='button' onClick={() => reset()}>Pause</button>\r\n          <div className=\"game--area\">\r\n            {snakeHead.map((item, index) =>\r\n              <div key={setId}>\r\n                <SnakeHead\r\n                  x={item[0]}\r\n                  y={item[1]}\r\n                />\r\n              </div>\r\n            )}\r\n            {snakeApples.map(({ id, xApple, yApple, eaten }) =>\r\n              <div key={setId}>\r\n                <SnakeApple\r\n                  xApple={xApple}\r\n                  yApple={yApple}\r\n                  eaten={eaten}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snake\":\"snake_snake__3KFXz\",\"apple\":\"snake_apple__SpYsV\",\"appleEaten\":\"snake_appleEaten__3SPCJ\",\"snakeBody\":\"snake_snakeBody__2diV4\"};"],"sourceRoot":""}